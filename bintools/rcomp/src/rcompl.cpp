/*
* Copyright (c) 1997-2009 Nokia Corporation and/or its subsidiary(-ies).
* All rights reserved.
* This component and the accompanying materials are made available
* under the terms of the License "Eclipse Public License v1.0"
* which accompanies this distribution, and is available
* at the URL "http://www.eclipse.org/legal/epl-v10.html".
*
* Initial Contributors:
* Nokia Corporation - initial contribution.
*
* Contributors:
*
* Description: 
* A lexical scanner generated by flex.
* Scanner skeleton version:
* $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
*
*/


#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 81
#define YY_END_OF_BUFFER 82
static yyconst short int yy_acclist[363] =
    {   0,
       82,   80,   81,   62,   80,   81,   63,   81,   63,   80,
       81,   37,   80,   81,   80,   81,   38,   80,   81,   79,
       80,   81,   79,   80,   81,   79,   80,   81,   49,   80,
       81,   49,   80,   81,   48,   80,   81,   48,   80,   81,
       48,   80,   81,   48,   80,   81,   48,   80,   81,   48,
       80,   81,   48,   80,   81,   48,   80,   81,   48,   80,
       81,   48,   80,   81,   48,   80,   81,   48,   80,   81,
       48,   80,   81,   48,   80,   81,   48,   80,   81,   48,
       80,   81,   48,   80,   81,   47,   80,   81,   44,   81,
       47,   80,   81,   45,   47,   80,   81,   46,   47,   80,

       81,   47,   80,   81,   80,   81,   62,   80,   81,   64,
       81,   64,   80,   81,   80,   81,   80,   81,   67,   80,
       81,   66,   81,   66,   67,   80,   81,   72,   80,   81,
       71,   81,   71,   72,   80,   81,   72,   80,   81,   76,
       80,   81,   78,   80,   81,   77,   81,   77,   80,   81,
       78,   80,   81,   80,   81,   65,   49,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   44,   43,   39,   40,   42,   41,   58,   59,   65,
       70,   76,   74,   75,   68,   69,   68,   69,   73,   53,

       55,   50,   20,   48,   48,   48,   48,   48,   48,   36,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   59,   68,
       69,   68,   69,   68,   73,   54,   56,   48,   21,   48,
       24,   48,   48,   48,    9,   48,   48,   33,   48,   48,
       48,   25,   48,   48,    3,   48,   48,   48,   48,   48,
       48,   27,   48,   11,   48,   12,   48,   23,   48,   10,
       48,   48,   48,   60,   61,   57,   51,   22,   48,   48,
       48,   48,   34,   48,    8,   48,   28,   48,   48,   48,
       48,   48,   48,   48,   29,   48,   19,   48,   48,   48,

       48,   48,   48,   52,   48,   26,   48,    7,   48,   48,
       30,   48,    5,   48,   48,   35,   48,    1,   48,    6,
       48,   31,   48,   48,   48,   48,   48,   48,   48,   32,
       48,   48,   48,   48,   48,   48,   48,   48,    2,   48,
       16,   48,   48,   18,   48,   48,   17,   48,   48,   48,
       48,   48,   15,   48,   13,   48,   48,   14,   48,   48,
        4,   48
    } ;

static yyconst short int yy_accept[270] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    4,    7,    9,   12,   15,   17,
       20,   23,   26,   29,   32,   35,   38,   41,   44,   47,
       50,   53,   56,   59,   62,   65,   68,   71,   74,   77,
       80,   83,   86,   89,   91,   94,   98,  102,  105,  107,
      110,  112,  115,  117,  119,  122,  124,  128,  131,  133,
      137,  140,  143,  146,  148,  151,  154,  156,  156,  156,
      156,  156,  156,  157,  157,  158,  158,  158,  159,  160,
      161,  162,  163,  164,  165,  166,  167,  168,  169,  170,
      171,  172,  173,  174,  175,  176,  177,  178,  179,  180,

      181,  182,  183,  184,  185,  186,  187,  188,  188,  188,
      188,  188,  190,  190,  190,  190,  191,  192,  193,  194,
      195,  195,  195,  195,  195,  196,  197,  199,  200,  201,
      202,  203,  205,  206,  207,  208,  209,  210,  212,  213,
      214,  215,  216,  217,  218,  219,  220,  221,  222,  223,
      224,  225,  226,  227,  228,  229,  230,  230,  230,  230,
      230,  231,  232,  234,  235,  236,  236,  237,  238,  238,
      239,  241,  243,  244,  245,  247,  248,  250,  251,  252,
      254,  255,  257,  258,  259,  260,  261,  262,  264,  266,
      268,  270,  272,  273,  274,  275,  275,  275,  276,  276,

      276,  277,  277,  278,  280,  281,  282,  283,  285,  287,
      289,  290,  291,  292,  293,  294,  295,  297,  299,  300,
      301,  302,  303,  304,  304,  304,  305,  306,  308,  310,
      311,  313,  315,  316,  318,  320,  322,  324,  325,  326,
      327,  328,  329,  330,  332,  333,  334,  335,  336,  337,
      338,  339,  341,  343,  344,  346,  347,  349,  350,  351,
      352,  353,  355,  357,  358,  360,  361,  363,  363
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    1,    1,    8,    9,   10,
       10,   11,   10,   10,   12,   13,   14,   15,   16,   17,
       18,   19,   19,   20,   19,   21,   19,    1,   10,   10,
       10,   10,    1,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   32,
       32,   38,   39,   40,   41,   32,   42,   43,   44,   32,
       10,   45,   10,    1,   46,    1,   47,   48,   47,   49,

       50,   51,   52,   53,   54,   53,   53,   55,   56,   57,
       58,   53,   53,   59,   60,   61,   62,   63,   64,   65,
       66,   53,   10,   10,   10,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[67] =
    {   0,
        1,    2,    3,    2,    2,    4,    1,    1,    4,    1,
        2,    1,    5,    1,    6,    6,    6,    6,    6,    6,
        6,    1,    7,    7,    7,    7,    6,    7,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    4,    8,    7,    9,    7,    6,
        9,    8,    8,    8,    8,    8,   10,    8,   10,    8,
       10,    8,   10,    8,   11,    8
    } ;

static yyconst short int yy_base[284] =
    {   0,
        0,    0,   64,   68,   76,   81,   72,   85,   88,   90,
      100,  112,  566,  567,  105,  567,  567,  567,  560,  567,
      567,  109,   86,   85,   93,    0,   77,  534,  526,  526,
      527,  105,  537,  531,  531,   93,  530,  525,  518,  497,
      491,  497,  567,  567,  548,  567,  567,  135,  544,  146,
      543,  542,  150,  150,  567,  567,  567,  567,  567,  567,
      533,    0,  567,  567,  567,  532,    0,  157,  534,  157,
      136,  162,  567,  172,    0,  179,    0,    0,  516,  503,
      519,  500,  499,  502,  502,  501,  505,  121,  508,  499,
      505,  493,  497,  492,  490,  485,  501,  488,  463,  469,

      463,  567,  567,  567,  567,  567,  567,  516,  164,  199,
      173,  567,  518,  165,  203,  514,  567,    0,  567,    0,
      511,  203,  210,  217,  567,  567,  567,  567,  224,  237,
        0,  194,  491,  479,  492,  480,  490,    0,  480,  476,
      488,  481,  466,  481,  468,  469,  474,  463,  463,  462,
      185,  475,  444,  438,  452,  567,  494,  177,  243,  256,
      490,  489,  488,  259,  487,  486,  250,  263,  270,  471,
        0,    0,  467,  455,    0,  465,    0,  454,  452,    0,
      445,    0,  457,  442,  446,  456,  453,  196,    0,    0,
        0,    0,  425,  244,  567,  475,  459,  567,  473,  457,

      567,  294,  301,    0,  449,  446,  438,    0,    0,  280,
      431,  432,  436,  428,  432,  434,    0,    0,  364,  371,
      361,  357,  345,  246,  269,  308,  362,    0,    0,  381,
        0,    0,  375,    0,    0,    0,    0,  329,  327,  331,
      328,  248,  279,    0,  278,  253,  254,  246,  243,  246,
      256,    0,    0,  221,    0,  218,    0,  170,  164,   95,
      101,    0,   87,   69,    0,   29,    0,  567,  329,  340,
      351,  362,  373,  380,  386,  395,  405,  416,  427,  434,
      440,  446,  455
    } ;

static yyconst short int yy_def[284] =
    {   0,
      268,    1,  269,  269,  270,  270,  271,  271,  272,  272,
      273,  273,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  274,  274,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  268,  268,  268,  268,  268,  276,  277,  277,
      277,  277,  268,  277,  268,  268,  268,  268,  268,  268,
      268,  278,  268,  268,  268,  268,  279,  268,  268,  268,
      280,  281,  268,  268,   25,  268,  282,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,

      275,  268,  268,  268,  268,  268,  268,  277,  268,  277,
      277,  268,  268,  268,  283,  277,  268,  278,  268,  279,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      282,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  268,  268,  277,  268,  268,
      277,  277,  277,  268,  277,  268,  268,  268,  268,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  268,  268,  268,  268,  268,  268,

      268,  268,  268,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  268,  268,  268,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,    0,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268
    } ;

static yyconst short int yy_nxt[634] =
    {   0,
       14,   15,   16,   17,   15,   18,   19,   14,   20,   21,
       21,   22,   21,   23,   24,   25,   25,   25,   25,   25,
       25,   14,   26,   27,   28,   29,   30,   26,   31,   26,
       26,   26,   26,   32,   26,   33,   34,   35,   36,   37,
       38,   39,   26,   26,   14,   26,   26,   26,   26,   40,
       26,   26,   26,   26,   26,   41,   26,   26,   42,   26,
       26,   26,   26,   26,   26,   26,   44,   45,  267,   46,
       44,   45,   47,   46,   56,   57,   47,   50,   51,   52,
       50,   53,   50,   51,   52,   50,   53,   56,   57,   54,
       59,   60,   59,   60,   54,  266,   72,   74,   61,   73,

       61,   63,   64,   65,   63,   74,   68,  265,   48,   68,
       66,   76,   48,   63,   64,   65,   63,   79,   69,   76,
       80,   67,   66,   71,   71,   71,   71,   71,   71,   71,
       93,   85,   94,   67,   76,   86,   95,  103,   87,  264,
      104,   88,   76,  105,   89,  141,  263,  110,  123,   77,
      110,  109,  112,  113,  114,  109,  142,  268,   68,  111,
      115,   68,  124,  116,  126,  127,  156,  157,  114,  128,
       69,  122,  122,  122,  122,  122,  122,  122,  109,  106,
      159,  160,  109,  158,  165,  124,  129,  129,  129,  129,
      129,  129,  129,  130,  130,  130,  130,  130,  130,  130,

      110,  189,  190,  110,  109,  162,  163,  166,  164,  170,
      165,  216,  111,  262,  171,  261,  217,  122,  122,  122,
      122,  122,  122,  122,  167,  167,  167,  167,  167,  167,
      167,  168,  168,  168,  168,  168,  168,  168,  129,  129,
      129,  129,  129,  129,  129,  195,  196,  197,  195,  196,
      169,  130,  130,  130,  130,  130,  130,  130,  198,  199,
      200,  156,  157,  114,  167,  167,  167,  167,  167,  167,
      167,  198,  199,  169,  260,  259,  202,  168,  168,  168,
      168,  168,  168,  168,  203,  203,  203,  203,  203,  203,
      203,  219,  220,  258,  257,  230,  256,  255,  221,  202,

      231,  254,  253,  222,  252,  251,  250,  223,  226,  226,
      226,  226,  226,  226,  226,  203,  203,  203,  203,  203,
      203,  203,  226,  226,  226,  226,  226,  226,  226,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   75,   75,  249,  248,  247,  246,
       75,   78,   78,   78,   78,   78,   78,  107,  107,  245,

      244,  243,  242,  107,  107,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  118,  241,  240,  118,
      118,  118,  118,  118,  118,  118,  118,  120,  239,  238,
      120,  120,  120,  120,  120,  120,  120,  120,   71,   71,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  131,  131,  237,  131,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  236,  235,  234,  233,
      232,  229,  228,  227,  225,  198,  224,  195,  218,  215,
      214,  213,  212,  211,  210,  209,  208,  207,  206,  205,
      204,  201,  109,  109,  109,  109,  156,  194,  193,  192,

      191,  188,  187,  186,  185,  184,  183,  182,  181,  180,
      179,  178,  177,  176,  175,  174,  173,  172,  128,  109,
      112,  109,  155,  154,  153,  152,  151,  150,  149,  148,
      147,  146,  145,  144,  143,  140,  139,  138,  137,  136,
      135,  134,  133,  132,  121,  119,  117,  109,  109,  109,
      102,  101,  100,   99,   98,   97,   96,   92,   91,   90,
       84,   83,   82,   81,   70,  268,   13,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,

      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268
    } ;

static yyconst short int yy_chk[634] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,  266,    3,
        4,    4,    3,    4,    7,    7,    4,    5,    5,    5,
        5,    5,    6,    6,    6,    6,    6,    8,    8,    5,
        9,    9,   10,   10,    6,  264,   23,   24,    9,   23,

       10,   11,   11,   11,   11,   25,   15,  263,    3,   15,
       11,   24,    4,   12,   12,   12,   12,   27,   15,   25,
       27,   11,   12,   22,   22,   22,   22,   22,   22,   22,
       36,   32,   36,   12,   24,   32,   36,   48,   32,  261,
       48,   32,   25,   48,   32,   88,  260,   50,   71,   24,
       50,   50,   53,   53,   53,   54,   88,   25,   68,   50,
       54,   68,   71,   54,   72,   72,  109,  109,  109,   72,
       68,   70,   70,   70,   70,   70,   70,   70,  111,   48,
      114,  114,  158,  111,  158,   71,   74,   74,   74,   74,
       74,   74,   74,   76,   76,   76,   76,   76,   76,   76,

      110,  151,  151,  110,  110,  115,  115,  122,  115,  132,
      115,  188,  110,  259,  132,  258,  188,  122,  122,  122,
      122,  122,  122,  122,  123,  123,  123,  123,  123,  123,
      123,  124,  124,  124,  124,  124,  124,  124,  129,  129,
      129,  129,  129,  129,  129,  159,  159,  159,  224,  224,
      129,  130,  130,  130,  130,  130,  130,  130,  160,  160,
      160,  164,  164,  164,  167,  167,  167,  167,  167,  167,
      167,  225,  225,  129,  256,  254,  167,  168,  168,  168,
      168,  168,  168,  168,  169,  169,  169,  169,  169,  169,
      169,  194,  194,  251,  250,  210,  249,  248,  194,  167,

      210,  247,  246,  194,  245,  243,  242,  194,  202,  202,
      202,  202,  202,  202,  202,  203,  203,  203,  203,  203,
      203,  203,  226,  226,  226,  226,  226,  226,  226,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  274,  274,  241,  240,  239,  238,
      274,  275,  275,  275,  275,  275,  275,  276,  276,  233,

      230,  227,  223,  276,  276,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  278,  222,  221,  278,
      278,  278,  278,  278,  278,  278,  278,  279,  220,  219,
      279,  279,  279,  279,  279,  279,  279,  279,  280,  280,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  282,  282,  216,  282,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  215,  214,  213,  212,
      211,  207,  206,  205,  200,  199,  197,  196,  193,  187,
      186,  185,  184,  183,  181,  179,  178,  176,  174,  173,
      170,  166,  165,  163,  162,  161,  157,  155,  154,  153,

      152,  150,  149,  148,  147,  146,  145,  144,  143,  142,
      141,  140,  139,  137,  136,  135,  134,  133,  121,  116,
      113,  108,  101,  100,   99,   98,   97,   96,   95,   94,
       93,   92,   91,   90,   89,   87,   86,   85,   84,   83,
       82,   81,   80,   79,   69,   66,   61,   52,   51,   49,
       45,   42,   41,   40,   39,   38,   37,   35,   34,   33,
       31,   30,   29,   28,   19,   13,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,

      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "RCOMP.LEX"
#define INITIAL 0
#line 3 "RCOMP.LEX"

#include <limits.h>
#include <string.h>
#include "main.h"
#include "STRUCTST.H"
#include "Parser.h"
#include "localise.h"

#define YY_SKIP_YYWRAP 1
#define YY_NEVER_INTERACTIVE 1
int yywrap();
void yyerror(const char* string, ...);

// Redefine YY_INPUT so we can parse binary data.
#undef YY_INPUT
#define YY_INPUT(buf, result, max_size) (result = new_yy_input(buf, max_size))

int new_yy_input(char *buf, int max_size)
{
   int result;
   if(yyin != NULL) {
		result = fread(buf, 1, max_size, yyin);
	}
   else if((pG->StdInBuffer != NULL) && (pG->StdInBufLength > 0)) {
		int left = pG->StdInBufLength - pG->StdInfBufPos ;
		if(left == 0)
			return YY_NULL ;
		result = (max_size < left) ? max_size : left ; 
		memcpy(buf,&(pG->StdInBuffer[pG->StdInfBufPos]),result); 
		pG->StdInfBufPos += result ;
   }

   if (result == 0)
      return YY_NULL;
   const unsigned char BOM[] = {0xef , 0xbb, 0xbf, 0x0 };
   // check for utf8 (BOM) header in buf
   for (int i = 0; i < result-3; i++) {
      if (0 == memcmp(&buf[i],BOM,3)) {
		memset(&buf[i],0x20,3);
      }
   }
   return result;
}

#include "rcomp.hpp"
#include "FILELINE.H"

#define VALUE_LEN   (1024*8)	// must match sizeof(YYSTYPE.Value)
char buf[VALUE_LEN];
char * pCh;
#define CHECK_APPEND(x)	\
    if (pCh-buf==VALUE_LEN-1) { yyerror("string too long - %c ignored", (x)); } else {*pCh++ = (x); }

int isCharLiteral;

extern String		InputBaseName;
extern FileLineManager* pFileLineHandler;
extern int*		pCurrentLineNumber;
char RealLineNumber[200];
 

#include "ERRORHAN.H"

#define REGISTER_LINE	ErrorHandler::Register(pFileLineHandler->GetCurrentFile(), pFileLineHandler->GetErrorLine(* pCurrentLineNumber))


#define string_rules 1

/* Rule set for string literals.			        */
/* n.b. Exclusive rule sets i.e. %x are available in MKS only	*/
/* so they are not used here; hence all the <INITIAL>'s.        */
#define file_line_rules 2

/* Rule set for file_line_directive.*/
#define cpp_comment 3

/* C++ comment to end of line */
#define c_comment 4

/* C comment */
#define comment_tag 5

/* Doxygen-style comment tag */
#line 761 "lex.yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#error "Unexpected behavior!"
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 130 "RCOMP.LEX"



	/* Translations section */
	/* ==================== */

	/*******************************************/
	/* Main keywords                           */
	/*******************************************/
#line 922 "lex.yy.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 269 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 567 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 139 "RCOMP.LEX"
return L_STRUCT;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 140 "RCOMP.LEX"
return L_RESOURCE;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 141 "RCOMP.LEX"
return L_NAME;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 142 "RCOMP.LEX"
return L_CHARACTER_SET;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 143 "RCOMP.LEX"
return L_OFFSET;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 144 "RCOMP.LEX"
return L_SYSTEM;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 145 "RCOMP.LEX"
return L_GLOBAL;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 146 "RCOMP.LEX"
return L_LOCAL;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 147 "RCOMP.LEX"
return L_ENUM;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 148 "RCOMP.LEX"
return L_ENUM;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 149 "RCOMP.LEX"
return L_UID_TWO;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 150 "RCOMP.LEX"
return L_UID_THREE;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 151 "RCOMP.LEX"
return L_RLS_STRING;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 152 "RCOMP.LEX"
return L_RLS_STRING8;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 153 "RCOMP.LEX"
return L_RLS_DOUBLE;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 154 "RCOMP.LEX"
return L_RLS_BYTE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 155 "RCOMP.LEX"
return L_RLS_WORD;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 156 "RCOMP.LEX"
return L_RLS_LONG;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 157 "RCOMP.LEX"
return L_MULTI;
	YY_BREAK
/*******************************************/
/* Types                                   */
/*******************************************/
case 20:
YY_RULE_SETUP
#line 162 "RCOMP.LEX"
return L_BUF;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 163 "RCOMP.LEX"
return L_BUF8;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 164 "RCOMP.LEX"
return L_BUF16;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 165 "RCOMP.LEX"
return L_WORD;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 166 "RCOMP.LEX"
return L_BYTE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 167 "RCOMP.LEX"
return L_LONG;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 168 "RCOMP.LEX"
return L_DOUBLE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 169 "RCOMP.LEX"
return L_TEXT;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 170 "RCOMP.LEX"
return L_LTEXT;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 171 "RCOMP.LEX"
return L_TEXT8;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 172 "RCOMP.LEX"
return L_LTEXT8;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 173 "RCOMP.LEX"
return L_TEXT16;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 174 "RCOMP.LEX"
return L_LTEXT16;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 175 "RCOMP.LEX"
return L_LINK;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 176 "RCOMP.LEX"
return L_LLINK;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 177 "RCOMP.LEX"
return L_SRLINK;
	YY_BREAK
/*******************************************/
/* Others                                  */
/*******************************************/
case 36:
YY_RULE_SETUP
#line 183 "RCOMP.LEX"
return L_LEN;
	YY_BREAK
/*******************************************/
/* String & character literals             */
/*******************************************/
case 37:
YY_RULE_SETUP
#line 189 "RCOMP.LEX"
{ BEGIN(string_rules); pCh = buf; isCharLiteral=0; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 190 "RCOMP.LEX"
{ BEGIN(string_rules); pCh = buf; isCharLiteral=1; }
	YY_BREAK
/* Escaped single- and double-quotes.*/
case 39:
YY_RULE_SETUP
#line 193 "RCOMP.LEX"
{ CHECK_APPEND('"'); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 194 "RCOMP.LEX"
{ CHECK_APPEND('\''); };
	YY_BREAK
/* Convert escaped character into corresponding actual character e.g. \t to tab. */
case 41:
YY_RULE_SETUP
#line 197 "RCOMP.LEX"
{ CHECK_APPEND( * ( strchr("\rr\bb\ff\nn\tt\vv\aa", yytext[1])-1));}
	YY_BREAK
/* Escaped backslash */
case 42:
YY_RULE_SETUP
#line 200 "RCOMP.LEX"
{ CHECK_APPEND('\\'); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 202 "RCOMP.LEX"
/* Escaped newline ignored*/ ;
	YY_BREAK
/* End of line before terminating double-quotes.*/
case 44:
YY_RULE_SETUP
#line 205 "RCOMP.LEX"
{ yyerror( isCharLiteral?"Unterminated character literal":"Unterminated string"); BEGIN 0; }
	YY_BREAK
/* End of string reached.*/
case 45:
YY_RULE_SETUP
#line 208 "RCOMP.LEX"
{ 
    if (!isCharLiteral) 
	    {
	    *pCh = '\0'; BEGIN(0); strcpy( yylval.Value, buf); 
		return L_STRING_LITERAL; 
	    }
    CHECK_APPEND(*yytext);
    }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 217 "RCOMP.LEX"
{ 
    if (isCharLiteral) 
	    {
	    *pCh = '\0'; BEGIN(0); strcpy( yylval.Value, buf); return L_CHAR_LITERAL;
	    }
    CHECK_APPEND(*yytext);
    }
	YY_BREAK
/* Anything other than \n is stored.*/
case 47:
YY_RULE_SETUP
#line 226 "RCOMP.LEX"
{ CHECK_APPEND(*yytext); }
	YY_BREAK
/*******************************************/
/* Labels                                  */
/*******************************************/
case 48:
YY_RULE_SETUP
#line 232 "RCOMP.LEX"
{	
    BEGIN(0);
    strcpy( yylval.Value, yytext);
    return L_LABEL;
    }
	YY_BREAK
/*******************************************/
/* Numbers                                 */
/*******************************************/
case 49:
YY_RULE_SETUP
#line 241 "RCOMP.LEX"
{	strcpy( yylval.Value, yytext); return L_NUM_NATURAL; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 242 "RCOMP.LEX"
{	strcpy( yylval.Value, yytext); return L_NUM_NATURAL; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 243 "RCOMP.LEX"
{	strcpy( yylval.Value, yytext); return L_NUM_FLOAT;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 244 "RCOMP.LEX"
{	strcpy( yylval.Value, yytext); return L_NUM_FLOAT;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 245 "RCOMP.LEX"
{	strcpy( yylval.Value, yytext); return L_NUM_FLOAT;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 246 "RCOMP.LEX"
{	strcpy( yylval.Value, yytext); return L_NUM_FLOAT;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 247 "RCOMP.LEX"
{	strcpy( yylval.Value, yytext); return L_NUM_FLOAT;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 248 "RCOMP.LEX"
{	strcpy( yylval.Value, yytext); return L_NUM_FLOAT;}
	YY_BREAK
/*******************************************/
/* file_line_directive                     */
/*******************************************/
case 57:
YY_RULE_SETUP
#line 253 "RCOMP.LEX"
{	BEGIN(file_line_rules); strcpy( RealLineNumber, yytext+2); }
	YY_BREAK
case 58:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 255 "RCOMP.LEX"
{	BEGIN(0); // # <line> "" means start of base file.
											pFileLineHandler->SetBase( InputBaseName, * pCurrentLineNumber);
										}
	YY_BREAK
case 59:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 259 "RCOMP.LEX"
{	BEGIN(0); // # <line> <filename> means @ line <line> of named base file.
											pFileLineHandler->PostInclude( yytext, RealLineNumber, * pCurrentLineNumber);
										}
	YY_BREAK
case 60:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 263 "RCOMP.LEX"
{
											BEGIN(0); // # <line> <filename> 1 means start of an included file.
											pFileLineHandler->SetInclude( yytext, * pCurrentLineNumber);
										}
	YY_BREAK
case 61:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 268 "RCOMP.LEX"
{
											BEGIN(0); // # <line> <filename> 2 means end of an included file and now at <line> in <filename>.
											pFileLineHandler->PostInclude( yytext, RealLineNumber, * pCurrentLineNumber);
										}
	YY_BREAK
/*******************************************/
/* White space                             */
/*******************************************/
case 62:
YY_RULE_SETUP
#line 278 "RCOMP.LEX"
; // skipped
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 279 "RCOMP.LEX"
; // skipped
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 280 "RCOMP.LEX"
; // skipped
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 281 "RCOMP.LEX"
{ BEGIN(cpp_comment); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 282 "RCOMP.LEX"
{ BEGIN(0); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 283 "RCOMP.LEX"
;			// skipped
	YY_BREAK
case 68:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 284 "RCOMP.LEX"
{ BEGIN(c_comment); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 285 "RCOMP.LEX"
{ BEGIN(c_comment); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 286 "RCOMP.LEX"
{ BEGIN(0); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 287 "RCOMP.LEX"
; // skipped
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 288 "RCOMP.LEX"
; // skipped
	YY_BREAK
/*******************************************/
/* Comment tags                            */
/*******************************************/
case 73:
YY_RULE_SETUP
#line 294 "RCOMP.LEX"
{ 
										BEGIN(comment_tag);
										pGL->SetStart(*(pFileLineHandler->GetCurrentFile()), pFileLineHandler->GetErrorLine(* pCurrentLineNumber));
										return L_TAG_START; 
										}	// any comment beginning with a slash followed by a star followed by an ampersand
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 299 "RCOMP.LEX"
{ 
										BEGIN(0); 
										return L_TAG_END; 
										}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 303 "RCOMP.LEX"
{ strcpy( yylval.Value, yytext);	return L_TAG_COMMAND; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 304 "RCOMP.LEX"
{ strcpy( yylval.Value, yytext);	return L_TAG_WORD; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 305 "RCOMP.LEX"
{ strcpy( yylval.Value, "\n");		return L_TAG_NEW_LINE; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 306 "RCOMP.LEX"
;
	YY_BREAK
/*******************************************/
/* Special single characters               */
/*******************************************/
case 79:
YY_RULE_SETUP
#line 311 "RCOMP.LEX"
return * yytext;
	YY_BREAK
/*******************************************/
/* Everything else cannot be recognised    */
/*******************************************/
case 80:
YY_RULE_SETUP
#line 317 "RCOMP.LEX"
{ yyerror("*** Unknown character '%c' (value 0x%x) ", *yytext, *yytext);}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 318 "RCOMP.LEX"
ECHO;
	YY_BREAK
#line 1503 "lex.yy.c"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(string_rules):
			case YY_STATE_EOF(file_line_rules):
			case YY_STATE_EOF(cpp_comment):
			case YY_STATE_EOF(c_comment):
			case YY_STATE_EOF(comment_tag):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 269 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 269 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 268);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 318 "RCOMP.LEX"
