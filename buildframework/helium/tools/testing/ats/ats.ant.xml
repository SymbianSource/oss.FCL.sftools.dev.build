<?xml version="1.0" encoding="UTF-8"?>
<!-- 
============================================================================ 
Name        : ats.ant.xml 
Part of     : Helium 

Copyright (c) 2009 Nokia Corporation and/or its subsidiary(-ies).
All rights reserved.
This component and the accompanying materials are made available
under the terms of the License "Eclipse Public License v1.0"
which accompanies this distribution, and is available
at the URL "http://www.eclipse.org/legal/epl-v10.html".

Initial Contributors:
Nokia Corporation - initial contribution.

Contributors:

Description:

============================================================================
-->
<project name="_testing.ats" xmlns:hlm="http://www.nokia.com/helium">
    <description>
        ATS testing targets.
    </description>
    <!-- -->
    <fileset id="reference.ats.flash.images" dir="${release.images.dir}">
        <include name="**/${build.id}*.core.fpsx" />
        <include name="**/${build.id}*.rofs2.fpsx" />
        <include name="**/${build.id}*.rofs3.fpsx" />
        <include name="**/*rnd.C00" />
        <include name="**/*rnd.V01" />
        <include name="**/*.fpsx" />
        <include name="**/*_rnd.fpsx" />
    </fileset>
    
    <property name="ats.flashfiles.minlimit" value="2" />

    <fileset id="reference.ats.sis.images" dir="${ats.sis.images.dir}">
        <include name="**/*.sis" />
    </fileset>
    <property name="ats.sisfiles.minlimit" value="1" />
    
    <var name="drop.file.counter" value="0" />

    <!-- 
    The target creates ATSDrop.zip file which also includes test.xml file; and sends the drop to ATS. 
    The layer definition, in system definition file, for tsrc directory should look like:
    <pre>
    <layer name="name_test_layer">
        <module name="module_name">
            <unit id="unit_id" name="unti_name" bldFile="path_of_tsrc_folder_to_be_built" filter=""/>
        </module>
    </layer>
    </pre>
    -->
    <target name="ats-test" if="enabled.ats">
        <mkdir dir="${test.log.dir}"/>
        <hlm:filterRecordStartMacro pattern="${ats.password}" category="ats"/>
        <trycatch property="exception" reference="exception">
            <try>
                <runtarget target="ats-delta"/>
                <antcall target="create-canonical-sysdef-file" inheritRefs="true">
                    <reference refid="ats.system.definition.files" torefid="system.definition.files" />
                </antcall>
                <runtarget target="copy-mon-sym" />
                <runtarget target="ats-create-drop" />
            </try>
            <catch>
                <if>
                    <istrue value="${ats.delta.enabled}" />
                    <then>
                        <echo message="${exception}"/>
                    </then>
                    <else>
                        <throw refid="exception"/>
                    </else>
                </if>
            </catch>
        </trycatch>
        <hlm:filterRecordStopMacro log="${test.log.dir}/${build.id}_ats.log" append="false"/>
        <hlm:metadatarecord database="${metadata.dbfile}">
            <hlm:textmetadatainput>
                <fileset casesensitive="false" file="${test.log.dir}/${build.id}_ats.log" />
                <metadatafilterset refid="filterset.ats" />
            </hlm:textmetadatainput>
        </hlm:metadatarecord>
        <hlm:generateBuildStatus file="${build.id}_ats.log" />
    </target>

    <!-- The target creates the ATSdrop.zip file including test.xml for ATS ASTE tests. This target is executable.-->
    <target name="ats-aste" if="enabled.aste">
        <mkdir dir="${test.log.dir}"/>
        <hlm:filterRecordStartMacro pattern="${ats.password}" category="ats"/>
        <runtarget target="do-ats-aste" />
        <hlm:filterRecordStopMacro log="${test.log.dir}/${build.id}_aste.log" append="false"/>
        <hlm:metadatarecord database="${metadata.dbfile}">
            <hlm:textmetadatainput>
                <fileset casesensitive="false" file="${test.log.dir}/${build.id}_aste.log" />
                <metadatafilterset refid="filterset.aste" />
            </hlm:textmetadatainput>
        </hlm:metadatarecord>
        <hlm:generateBuildStatus file="${build.id}_aste.log" />
    </target>

    <!-- The target creates the MATTI_drop.zip file including test.xml for MATTI tests. This target is executable.-->
    <target name="matti-test" if="enabled.matti">
        <mkdir dir="${test.log.dir}"/>
        <hlm:filterRecordStartMacro pattern="${ats.password}" category="ats"/>
        <runtarget target="do-ats-matti" />
        <hlm:filterRecordStopMacro log="${test.log.dir}/${build.id}_matti.log" append="false"/>
        <hlm:metadatarecord database="${metadata.dbfile}">
            <hlm:textmetadatainput>
                <fileset casesensitive="false" file="${test.log.dir}/${build.id}_matti.log" />
                <metadatafilterset refid="filterset.matti" />
            </hlm:textmetadatainput>
        </hlm:metadatarecord>
        <hlm:generateBuildStatus file="${build.id}_matti.log" />
    </target>

    <!-- Sends drop file to ATS/ASTE. Please see `ats-test` for description. -->
    <target name="do-ats-test" depends="ats-username, ats-password" unless="skip.ats.sending">
        <property name="ats.sending" value="true" />
        <!-- Make the drop file visible to ATS. -->
        
        <var name="ats.drop.location.file" unset="true"/>
        <if>
            <isset property="ats.drop.location" />
            <then>
                <mkdir dir="${ats.drop.location}" />
                <property name="ats.drop.location.file" location="${ats.drop.location}/${ats.drop.file}" />
                <copy file="${build.output.dir}/ats/${ats.drop.file}" tofile="${ats.drop.location.file}" />
            </then>
            <else>
                <property name="ats.drop.location.file" location="${build.output.dir}/ats/${ats.drop.file}" />
            </else>
        </if>

        <!-- Notify ATS about the drop. -->
        <if>
            <istrue value="${ats4.enabled}" />
            <then>
                <hlm:python failonerror="true">
version = r'${java.version}'
if '1.6.0' in version:
    assert int(version.split('_')[1]) > 6, 'Java 6 u7 required'
                </hlm:python>
                <condition property="ats.import.arg" value="-import" else="">
                    <equals arg1="${ats.script.type}" arg2="import" />
                </condition>
                <java classname="com.nokia.ats.util.server.CommandLineClient" fork="true">
                    <classpath>
                        <pathelement path="${java.class.path}"/>
                    </classpath>
                    <arg line="-url http://${ats.server}/ServerService -path ${ats.drop.location.file} ${ats.import.arg}"/>
                </java>
            </then>
            <else>
                <condition property="ats.wsh.testrun.file" value="wshTestRunImport.vbs" else="wshTestRunX.vbs">
                    <equals arg1="${ats.script.type}" arg2="import" />
                </condition>
                <exec executable="cscript" dir="${build.drive}/" failonerror="false">
                    <env key="ats3.username" value="${ats.username}" />
                    <env key="ats3.password" value="${ats.password}" />
                    <env key="ats3.host" value="${ats.server}" />
                    <env key="ats3.pathToDrop" value="${ats.drop.location.file}"/>
                    <arg value="${helium.dir}/tools/testing/ats/${ats.wsh.testrun.file}" />
                </exec>
            </else>
        </if>
    </target>

    <!-- The target is dependent on "ats-test", should not be called independently. The target fetches flash files location -->
    <target name="ats-set-flash-image-path">
        <pathconvert pathsep="," property="ats.flash.images">
            <fileset refid="reference.ats.flash.images"/>
        </pathconvert>
        <hlm:python failonerror="true">
<![CDATA[
flashfilescount = len(r'${ats.flash.images}'.split(','))
mincount = int(r'${ats.flashfiles.minlimit}')
if flashfilescount < mincount:
    raise Exception('Not enough flash files, check reference.ats.flash.images')
]]>
        </hlm:python>
    </target>

    <!-- The target is dependent on "ats-test", should not be called independently. The target fetches flash files location -->
    <target name="ats-set-sis-flash-image-path">
        <pathconvert pathsep="," property="ats.sis.images">
            <fileset refid="reference.ats.sis.images"/>
        </pathconvert>
    </target>

    <!-- Sets values common for ATS, this is a dependent target and shouldn't be used as an individual target -->
    <target name="ats-common">
        <property name="ats.config.file" value="" />
        <property name="ats4.enabled" value="False" />
        <property name="ats.product.hwid" value="" />
        <property name="ats.test.timeout" value="60" />
        <property name="ats.report.location" value="${publish.dir}/${publish.subdir}" />
        <condition property="internal.ats.diamonds.arg" value="--diamonds-build-url=http://${diamonds.host}${diamonds.build.id}" else="">
            <isset property="diamonds.build.url" />
        </condition>
    </target>

    <!-- Sets default values for the ATS (STIF and EUnit), this is a dependent target and shouldn't be used as an individual target -->
    <target name="ats-set-defaults-stifeunit" depends="ats-common,lookup-email">
        <!-- Default values for the properties -->
        <property name="ats.email.list" value="${email.from}" />
        <property name="tsrc.data.dir" value="data" />
        <property name="ats.plan.name" value="plan" />
        <property name="ats.testrun.name" value="${build.id}_${ats.product.name}" />
        <property name="ats.ctc.host" value="" />
        <condition property="ats.version" value="4" else="3">
            <istrue value="${ats4.enabled}" />
        </condition>
        <var name="ats.drop.file" value="ATS${ats.version}Drop${drop.file.counter}.zip" />
        
        <property name="ats.target.platform" value="armv5 urel" />
        <property name="ats.trace.enabled" value="False" />
        <property name="ats.ctc.enabled" value="False" />
        <property name="ats.multiset.enabled" value="False" />
        <property name="eunitexerunner.flags" value="/E S60AppEnv /R Off" />
        <property name="ats.obey.pkgfiles.rule" value="False" />
    </target>

    <!-- Sets default values for the ASTE, this is a dependent target and shouldn't be used as an individual target -->
    <target name="ats-set-defaults-aste" depends="ats-common">
        <var name="ats.drop.file" value="ATSAsteDrop.zip" />
        <property name="ats.aste.test.type" value="smoke" />
        <property name="ats.aste.testasset.caseids" value="100,101,102,103,105,106,107,108,109,110,111,112,113,114,115" />
        <property name="ats.aste.software.version" value="${build.id}" />
        <property name="ats.aste.language" value="English" />
        <property name="ats.aste.software.release" value="${build.name}" />
        <property name="ats.aste.plan.name" value="plan" />
        <property name="ats.aste.testrun.name" value="${build.id}_${ats.product.name}_${major.version}.${minor.version}" />
        <property name="ats.aste.email.list" value="" />
    </target>

    <!-- This macro fetches the tsrc paths from system definition file (layers.sysdef.xml), layer defintion should look like
    <pre>
    <layer name="name_test_layer">
        <module name="module_name">
            <unit id="unit_id" name="unti_name" bldFile="path_of_tsrc_folder_to_be_built" filter="" />
        </module>
    </layer>
    </pre>
    -->
    <scriptdef name="getModuleTsrcMacro" language="jython" uri="http://www.nokia.com/helium">
        <attribute name="property" />
        <attribute name="prefix"/>        
import traceback
import os
import atsant
from com.nokia.ant.util import Helper

canonicalsysdeffile = Helper.getProperty(project, 'canonical.sysdef.file')
modules = atsant.files_to_test(canonicalsysdeffile, project.getProperty('exclude.test.layers'), project.getProperty('ido.build.filter'), project.getProperty('build.drive'))

for name in modules.keys():    
    if modules[name] == []:
        del modules[name]
    else:
        project.setProperty("%s.%s" % (attributes.get('prefix'), name), " ".join(modules[name]))
        
project.setProperty(attributes.get('property'), ",".join(modules.keys()))
project.setProperty('ats.drops.count', str(len(modules)))
    </scriptdef>

    <!-- The target is dependent on "ats-test", should not be called individually. The target creates the ATSdrop.zip file including test:xml file -->
    <target name="ats-create-drop" depends="ats-set-flash-image-path">
        <mkdir dir="${build.output.dir}/ats" />
        <hlm:getModuleTsrcMacro property="module.list" prefix="module.tsrc" />
        <if>
            <scriptcondition language="beanshell">
                <![CDATA[
                    String value = project.getProperty("module.list");
                    if (value != null) {
                        String[] out = value.split(",");
                        if ((out == null) || (out.length == 0) || ((out.length == 1) && (out[0].length()==0))) {
                                    self.setValue(true);
                            } else {
                                    self.setValue(false);
                            }
                        } else {
                            self.log("Error: module.list not defined.");
                            self.setValue(true);
                        }
                            ]]>
            </scriptcondition>
            <then>
                <echo message="Error: No test modules found!" />
            </then>
            <else>
                <for list="${module.list}" delimiter="," param="module">
                    <sequential>
                        <runtarget target="ats-set-defaults-stifeunit" />
                        <echo>${ats.drop.file}</echo>
                        <exec executable="python">
                            <arg value="${helium.dir}/tools/common/python/lib/ats3/__init__.py" />
                            <arg value="--device-type=${ats.product.name}" />
                            <arg value="--device-hwid=${ats.product.hwid}" />
                            <arg value="${internal.ats.diamonds.arg}" />
                            <arg value="--drop-file=${build.output.dir}/ats/${ats.drop.file}" />
                            <arg value="--report-email=${ats.email.list}" />
                            <arg value="--plan-name=${ats.plan.name}" />
                            <arg value="--testrun-name=${ats.testrun.name}_@{module}" />
                            <arg value="--flash-images=${ats.flash.images}" />
                            <arg value="--minimum-flash-images=${ats.flashfiles.minlimit}" />
                            <arg value="--target-platform=${ats.target.platform}" />
                            <arg value="--data-dir=${tsrc.data.dir}" />
                            <arg value="--test-timeout=${ats.test.timeout}" />
                            <arg value="--build-drive=${build.drive}" />
                            <arg value="--trace-enabled=${ats.trace.enabled}" />
                            <arg value="--ctc-enabled=${ats.ctc.enabled}" />
                            <arg value="--multiset-enabled=${ats.multiset.enabled}" />
                            <arg value="--file-store=${ats.report.location}" />
                            <arg value="--eunitexerunner-flags=${eunitexerunner.flags}" />
                            <arg value="--ctc-run-process-params=${ats.ctc.host}#${ats.drop.file}#${ats.drops.count}" /> <!-- Three differnt value are combined with '#' character which is later parsed inside the script -->
                            <arg value="--monsym-files=${ats.ctc.monsyms}" />
                            <arg value="--config=${ats.config.file}" />
                            <arg value="--obey-pkgfiles=${ats.obey.pkgfiles.rule}" />
                            <arg value="--ats4-enabled=${ats4.enabled}" />
                            <arg value="--verbose" />
                            <arg line="${module.tsrc.@{module}}" />
                        </exec>
                        <runtarget target="do-ats-test" />
                        <math result="drop.file.counter" operand1="1" operation="+" operand2="${drop.file.counter}" datatype="int" />
                    </sequential>
                </for>
            </else>
        </if>
    </target>


    <!-- Please see ats-aste for description.-->
    <target name="do-ats-aste" depends="ats-set-flash-image-path, ats-set-defaults-aste" if="enabled.aste">
        <mkdir dir="${build.output.dir}/ats" />
        <exec executable="python">
            <arg value="${helium.dir}/tools/common/python/lib/ats3/aste.py" />
            <arg value="--report-email=${ats.aste.email.list}" />
            <arg value="--device-type=${ats.product.name}" />
            <arg value="--flash-images=${ats.flash.images}" />
            <arg value="--minimum-flash-images=${ats.flashfiles.minlimit}" />
            <arg value="--plan-name=${ats.aste.plan.name}" />
            <arg value="--testrun-name=${ats.aste.testrun.name}" />
            <arg value="--device-hwid=${ats.product.hwid}" />
            <arg value="--test-timeout=${ats.test.timeout}" />
            <arg value="--build-drive=${build.drive}" />
            <arg value="${internal.ats.diamonds.arg}" />
            <arg value="--drop-file=${build.output.dir}/ats/${ats.drop.file}" />
            <arg value="--test-type=${ats.aste.test.type}" />
            <arg value="--testasset-location=${ats.aste.testasset.location}" />
            <arg value="--testasset-caseids=${ats.aste.testasset.caseids}" />
            <arg value="--software-version=${ats.aste.software.version}" />
            <arg value="--device-language=${ats.aste.language}" />
            <arg value="--software-release=${ats.aste.software.release}" />
            <arg value="--ats4-enabled=${ats4.enabled}" />
            <arg value="--verbose" />
        </exec>
        <runtarget target="do-ats-test" />
    </target>

    <!--
        This target search the mon.sym files using unit information from the canonical sysdef file.
        Then it copies the discovered files under the ftp server defined by ats.ctc.host.
        The target url is: ftp ://[server]/ctc_helium/[diamonds_id]/mon_syms/[id]/mon.sym 
    -->
    <target name="copy-mon-sym">
        <if>
            <istrue value="${ats.ctc.enabled}"/>
            <then>
                <fmpp sourceFile="${helium.dir}/tools/testing/ats/templates/monsym-file-list.txt.ftl"
                    outputFile="${temp.build.dir}/monsym-file-list.txt">
                    <data expandProperties="yes">
                        data: xml(${canonical.sysdef.file})
                        ant: antProperties()
                    </data>
                </fmpp>
                <hlm:path2file reference="mon.sym.list" file="${temp.build.dir}/monsym-file-list.txt" />
                <script language="jython">
import os
import ctc

if not project.getProperty('ats.ctc.host'):
    raise Exception('ats.ctc.host property is not defined.')
if not project.getProperty('diamonds.build.id'):
    raise Exception('diamonds.build.id property is not defined.')

server = project.getProperty('ats.ctc.host')
diamondsid = os.path.basename(os.path.dirname(project.getProperty('diamonds.build.id')))
path = project.getReference('mon.sym.list')
if not path:
    raise Exception('mon.sym.list reference has not been set')

uploader = ctc.MonSymFTPUploader(server, path.list(), diamondsid)
monsyms = uploader.upload()
            
# Using ; to separate the path because the target script is running on windows
project.setNewProperty('ats.ctc.monsyms', ';'.join([ "//%s/%s" % (server, x) for x in monsyms]))
                </script>
                <echo>ats.ctc.monsyms: ${ats.ctc.monsyms}</echo>
            </then>
        </if>
    </target>

    <!-- a dependant target please do not call directly use matti-test,
    target calls the MATTI script that creates the MATTI_drop.zip file and runs the tests
    listed in test.rb.  ats-set-flash-image-path and ats-set-sis-flash-image-path look for lists of files-->
    <target name="do-ats-matti" depends="ats-set-flash-image-path, ats-set-sis-flash-image-path" >
        <runtarget target="ats-set-defaults-stifeunit" />
        <!--need to set theseup for use by do-ats-test target-->
        <mkdir dir="${build.output.dir}/ats" />
        <var name="ats.drop.file" value="ATSMattiDrop.zip" />
        <if>
            <!-- get the list of .sis files in the defined folder to pass as a list to the python script-->
            <scriptcondition language="beanshell">
                <![CDATA[
                    String sisfiles = project.getProperty("ats.sis.images");
                    String value = project.getProperty("ats.sisfiles.minlimit");
                    if (sisfiles != null && value != null) {
                        int cond = Integer.valueOf(value).intValue();
                        String[] out = sisfiles.split(",");
                        if (out.length < cond ) {
                            self.setValue(true);
                        } else {
                            self.setValue(false);
                        }
                    } else {
                        self.log("Error: reference.ats.sis.images not defined.");
                        self.setValue(true);
                    }
                        ]]>
            </scriptcondition>
            <then>
                <echo message="Error: Not enough sis files check reference.ats.sis.images" />
            </then>
            <else>
                <!-- execute the MattiDrops.py script with parameters-->
                <exec executable="python" resultproperty="script.response">
                    <arg value="${helium.dir}/tools/common/python/lib/ats3/matti/MattiDrops.py" />
                    <arg value="--build-drive=${build.drive}" />
                    <arg value="--matti-scripts=${matti.scripts}" />
                    <arg value="--flash-images=${ats.flash.images}" />
                    <arg value="--harness=STIF" />
                    <arg value="--file-store=${ats.output.dir}" />
                    <arg value="--testrun-name=${ats.testrun.name}" />
                    <arg value="--device-type=${ats.product.name}" />
                    <arg value="--device-hwid=${ats.product.hwid}" />
                    <arg value="--diamonds-build-url=${internal.ats.diamonds.arg}" />
                    <arg value="--drop-file=${build.output.dir}/ats/${ats.drop.file}" />
                    <arg value="--minimum-flash-images=${ats.flashfiles.minlimit}" />
                    <arg value="--plan-name=${ats.plan.name}" />
                    <arg value="--sis-files=${ats.sis.images}" />
                    <arg value="--template-loc=${template.file}" />
                </exec>
                <if> 
                    <not>
                        <!-- if the response is not 0 then need to create the skip.ats.sending
                         flag so that do-ats-test is not run-->
                        <equals arg1="${script.response}" arg2="0" />
                    </not>
                    <then>
                        <property name="skip.ats.sending" value="1" />
                    </then>
                </if>
                <runtarget target="do-ats-test" />
            </else>
        </if>
    </target>
    
    <property name="ats.evalid.pre" value="${temp.build.dir}/${build.id}_atsevalidpre" />
    <property name="ats.evalid.post" value="${temp.build.dir}/${build.id}_atsevalidpost" />
    
    <!-- Call before preperation -->
    <target name="find-files-pre" if="ats.delta.enabled">
        <hlm:evalidMacro dir="${ats.evalid.pre}"/>
    </target>
    
    <!-- Call after preperation -->
    <target name="find-files-post" if="ats.delta.enabled">
        <hlm:evalidMacro dir="${ats.evalid.post}"/>
    </target>
    
    <!-- Run evalid on ido directories -->
    <macrodef name="evalidMacro" uri="http://www.nokia.com/helium">
        <attribute name="dir"/>
        <sequential>
            <runtarget target="ido-create-ado-mapping"/>
            <hlm:python>
import delta_zip
delta_zip.evalidAdomapping(r'${build.drive}', r'@{dir}', r'${ado.mapping.file}')
            </hlm:python>
        </sequential>
    </macrodef>
    
    <!-- Generate sysdef fileset based on evalid data -->
    <target name="ats-delta" if="ats.delta.enabled">
        <script language="jython">
import ido
from com.nokia.ant.util import Helper
import delta_zip
import os

atspath = project.createDataType("path")
i = project.getReference('system.definition.files').iterator()
changedfiles = delta_zip.changedFiles(Helper.getProperty(project, 'ats.evalid.pre'), Helper.getProperty(project, 'ats.evalid.post'))
while i.hasNext():
    path = i.next().toString()
    sysdefpath = os.path.abspath(os.path.join(project.getProperty('build.drive') + os.sep, ido.get_sysdef_location(path)))
    for f in changedfiles:
        if sysdefpath.lower() in os.path.abspath(f).lower():
            pe = atspath.createPathElement()
            pe.setPath(path)
            break
project.addReference('ats.system.definition.files', atspath)
        </script>
    </target>
    
    <!-- Common target to run ats, aste and matti -->
    <target name="run-test" depends="ats-test,ats-aste,matti-test"/>
</project>
